from __future__ import annotations

from enum import Enum
from io import StringIO
import pkgutil
from typing import Mapping


def data_path(file_name: str):
    return pkgutil.get_data(__name__, f"data/{file_name}")


def _get_symbols() -> Mapping[str, int]:
    symbols = {}
    symbol_data = data_path("basepatch.sym").decode("utf-8")
    with StringIO(symbol_data) as stream:
        for line in stream:
            try:
                addr, label, *_ = line.split()
            except ValueError:
                continue

            # These labels are either generated by assembler directives or are
            # file/function local. Either way, not useful here
            if label[0] in ("@", "."):
                continue

            addr = int(addr, base=16)
            symbols[label] = addr
    return symbols


symbols = _get_symbols()


def get_symbol(symbol: str, offset: int = 0) -> int:
    """Convert a label name and offset to an address on GBA system bus."""

    return symbols[symbol.lower()] + offset
